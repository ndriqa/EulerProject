package Project012;
/**The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 * @author ndriqa
 * */

public class HighlyDivisibleTriangular {
    int requiredDivisorsNum;
    int triangularNum;
    int triangularValue;

    public HighlyDivisibleTriangular(int divisors){
        requiredDivisorsNum = divisors;
    }

    public void calculate(){
        int i = 1;
        triangularValue = 0;
        int divisorNum = 0;

        while(divisorNum < requiredDivisorsNum){
            divisorNum = 0;         //reset
            triangularNum = i;
            triangularValue = getTriangularValue(i);

            int sqrtNum = (int) Math.sqrt(triangularValue);

            for (int j = 1; j < sqrtNum; j++) {
                if (triangularValue%j == 0){
                    if (triangularValue/j == j){
                        divisorNum++;
                    } else {
                        divisorNum += 2;
                    }
                }
            }
            System.out.println("not " + i + " with " + divisorNum + " divisors");
            i++;
        }
    }

    private int getTriangularValue(int i) {
        return triangularValue+i;
    }

    @Override
    public String toString(){
        return "value of first triangular number to have over " + requiredDivisorsNum
                + " divisors is: " + triangularNum + " with value:  " + triangularValue;
    }

    public static void main(String[] args) {
        int n = 500;
        HighlyDivisibleTriangular number = new HighlyDivisibleTriangular(n);
        number.calculate();
        System.out.println(number);
    }
}
